repos:
  # id can either be an exact repo ID or a regex.
  # If using a regex, it must start and end with a slash.
  # Repo ID's are of the form {VCS hostname}/{org}/{repo name}, ex.
  # github.com/runatlantis/atlantis.
  # this can be used for project specific settings if there's ever a use case for.
- id: /.*/
  # branch is an regex matching pull requests by base branch
  # (the branch the pull request is getting merged into).
  # By default, all branches are matched
  branch: /.*/

  # repo_config_file specifies which repo config file to use for this repo.
  # By default, atlantis.yaml is used.
  repo_config_file: ./atlantis.yaml

# Meaning of different types of PR state
  # Approved - SCM approval e.g. reviewer approving a PR ( must be in the list of codeowners, protected branch things)
  # Mergeable - all checks must pass (defined in protected branch).
  # UnDiverged - PR must be ahead of base branch!

  # Requiring PR is approved before an applicable subcommand.
  apply_requirements: [approved, mergeable, undiverged]

  # Requiring PR is approved and mergeable (all checks are green e.g. CI) before an applicable subcommand.
  import_requirements: [approved, mergeable, undiverged]

  # allowed_overrides specifies which keys can be overridden by this repo in
  # its atlantis.yaml file.
  allowed_overrides: [workflow, repo_locking]

  # allowed_workflows specifies which workflows the repos that match 
  # are allowed to select.
  allowed_workflows: [custom]

  # repo_locking defines whether lock repository when planning.
  # If true (default), atlantis try to get a lock.
  repo_locking: true

  # delete_source_branch_on_merge defines whether the source branch would be deleted on merge
  # If false (default), the source branch won't be deleted on merge
  delete_source_branch_on_merge: true


  # pre_workflow_hooks defines arbitrary list of scripts to execute before workflow execution.
  #pre_workflow_hooks: 
    #- run: my-pre-workflow-hook-command arg1
  
  # post_workflow_hooks defines arbitrary list of scripts to execute after workflow execution.
  #post_workflow_hooks: 
    #- run: my-post-workflow-hook-command arg1

# workflows lists server-side custom workflows. For now just one flexible custom workflow, but can create one per env if needed.
workflows:
  custom:
    plan: 
      steps:
        - init
        - env:
            name: AWS_ACCOUNT_ID
            command: "aws s3 cp s3://atlantis-account-repo-config/repo_account_id_config.json - | jq -r '.[] | select (.repo_name=='${BASE_REPO_NAME}') | .account_id"
        - run: 'if [ $AWS_ACCOUNT_ID = "123456789"]; then echo account matches && exit 1; fi;'
        - run: 'if [ "${ENVIRONMENT}" = "prod" -a "${BASE_BRANCH_NAME}" = "develop" ]; then exit 1; fi;'
        - plan: 
            extra_args:
              - -input=false
              - -refresh
              - -no-color
              - -out=$PLANFILE
    apply:
      steps: 
        - apply:
            extra_args: 
              - -no-color
              - $PLANFILE

